name: 'Get Version Info'
description: 'Get version information from package.json or git'
author: 'TruleyAI'

inputs:
  package-path:
    description: 'Path to package.json file'
    required: false
    default: './package.json'
  fallback-to-git:
    description: 'Use git commit info if package.json not found'
    required: false
    default: 'true'

outputs:
  version:
    description: 'Version from package.json or git'
    value: ${{ steps.get-version.outputs.version }}
  package-version:
    description: 'Version from package.json'
    value: ${{ steps.get-version.outputs.package-version }}
  git-version:
    description: 'Version from git (branch-commit)'
    value: ${{ steps.get-version.outputs.git-version }}
  source:
    description: 'Source of version (package|git)'
    value: ${{ steps.get-version.outputs.source }}

runs:
  using: 'composite'
  steps:
    - name: Get version information
      id: get-version
      shell: bash
      run: |
        PACKAGE_VERSION=""
        GIT_VERSION=""
        VERSION=""
        SOURCE=""
        
        # Try to get version from package.json
        if [ -f "${{ inputs.package-path }}" ]; then
          PACKAGE_VERSION=$(cat "${{ inputs.package-path }}" | grep '"version"' | head -1 | sed 's/.*"version": *"\([^"]*\)".*/\1/')
          echo "Found package.json version: $PACKAGE_VERSION"
        else
          echo "package.json not found at ${{ inputs.package-path }}"
        fi
        
        # Get git version (branch-commit)
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          BRANCH_NAME="${{ github.head_ref }}"
        else
          BRANCH_NAME="${{ github.ref_name }}"
        fi
        
        # Clean branch name
        CLEAN_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g' | tr '[:upper:]' '[:lower:]')
        
        # Get short commit SHA
        COMMIT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
        
        GIT_VERSION="${CLEAN_BRANCH}-${COMMIT_SHA}"
        
        # Determine final version and source
        if [ -n "$PACKAGE_VERSION" ]; then
          VERSION="$PACKAGE_VERSION"
          SOURCE="package"
        elif [ "${{ inputs.fallback-to-git }}" == "true" ]; then
          VERSION="$GIT_VERSION"
          SOURCE="git"
        else
          echo "Error: No version found and git fallback disabled"
          exit 1
        fi
        
        echo "Package version: $PACKAGE_VERSION"
        echo "Git version: $GIT_VERSION"
        echo "Final version: $VERSION"
        echo "Source: $SOURCE"
        
        # Set outputs
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "package-version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
        echo "git-version=$GIT_VERSION" >> $GITHUB_OUTPUT
        echo "source=$SOURCE" >> $GITHUB_OUTPUT

branding:
  icon: 'info'
  color: 'purple'